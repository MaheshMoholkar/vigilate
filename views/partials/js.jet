<script src="/static/admin/js/pusher.min.js"></script>

<script>
    let pusher = new Pusher("{{.PreferenceMap["pusher-key"]}}", {
        authEndPoint: "/pusher/auth",
        wsHost: "localhost",
        wsPort: 4001,
        forceTLS: false,
        enabledTransports: ["ws","wss"],
        disabledTransports: []
    });

    let publicChannel = pusher.subscribe("public-channel");

    publicChannel.bind("app-starting", function(data){
        successAlert(data.message)
    })

    publicChannel.bind("app-stoping", function(data){
        warningAlert(data.message)
    })

    publicChannel.bind("host-service-status-changed", function(data){
        attention.toast({
            msg: data.message,
            icon: "info",
            timer: 30000,
            showCloseButton: true,
        })

        // update tables

        // remove existing table row if exist
        let exists = !!document.getElementById("host-service-"+data.host_service_id)
        if (exists) {
            let row = document.getElementById("host-service-"+data.host_service_id)
            row.parentNode.removeChild(row)
        }

        // update tables
        let tableExists = !!document.getElementById(data.status + "-table")
        if(tableExists){
            let tableRef = document.getElementById(data.status+"-table")
            let newRow = tableRef.tBodies[0].insertRow(-1)

            newRow.setAttribute("id", "host-service-"+data.host_service_id)

            // insert the first td
            let newCell = newRow.insertCell(0)
            newCell.innerHTML = `<span class="${data.icon}"></span>
            ${data.service_name}
            <span class="badge bg-secondary ml-4" style="cursor: pointer;"
                onclick="checkNow(${data.host_service_id}, '${data.status}')">Check Now
            </span>`

            // insert second td
            newCell = newRow.insertCell(1)
            if(data.status !== "pending"){
                newCell.innerHTML = `${data.last_check}`
            } else {
                newCell.innerHTML = "Pending..."
            }

            // insert third td
            newCell = newRow.insertCell(2)
        }   
    })

    publicChannel.bind("host-service-count-changed", function(data){
        let healthyCountExists = !!document.getElementById("healthy_count")
        if (healthyCountExists) {
            document.getElementById("healthy_count").innerHTML = data.healthy_count
            document.getElementById("problem_count").innerHTML = data.problem_count
            document.getElementById("pending_count").innerHTML = data.pending_count
            document.getElementById("warning_count").innerHTML = data.warning_count
        }
    })

    document.getElementById("monitoring-live").addEventListener("change", function () {
            let enabled = document.getElementById("monitoring-live").checked;
            if(!enabled) {
                attention.confirm({
                    html: "This will stop monitoring of all hosts and services. Are you sure?",
                    callback: function(result){
                        if (result){
                            updateSystemPref("monitoring_live", "0")
                            toggleMonitoring(0)
                        } else {
                            document.getElementById("monitoring-live").checked = true
                        }
                    }
                })
            } else {
                updateSystemPref("monitoring_live", "1")
                toggleMonitoring(1)
            }
        })

        function updateSystemPref(prefName, prefValue){
            let formData = new FormData();
            formData.append("pref_name", prefName)
            formData.append("pref_value", prefValue)
            formData.append("csrf_token", "{{.CSRFToken}}")
            let ajax = new XMLHttpRequest()
            ajax.responseType = "json"
            ajax.open("POST", "/admin/preference/ajax/set-system-pref")
            ajax.send(formData)
            ajax.onreadstatechange = function(){
                if(ajax.readyState === 4){
                    let resp = ajax.response;
                    if(!resp.ok){
                        errorAlert("Errors: " + resp.message)
                    }
                }
            }
        }

        function toggleMonitoring(enabled){
            let formData = new FormData();
            formData.append("enabled", enabled)
            formData.append("csrf_token", "{{.CSRFToken}}")
            let ajax = new XMLHttpRequest()
            ajax.responseType = "json"
            ajax.open("POST", "/admin/preference/ajax/toggle-monitoring")
            ajax.send(formData)
            ajax.onreadstatechange = function(){
                if(ajax.readyState === 4){
                    let resp = ajax.response;
                    if(!resp.ok){
                        errorAlert("Errors: " + resp.message)
                    }
                }
            }
        }

  let attention = Prompt();

  {{if .Flash != ""}}
      successAlert('{{.Flash}}')
  {{end}}

  {{if .Warning != ""}}
      warningAlert('{{.Warning}}')
  {{end}}

  {{if .Error != ""}}
      errorAlert('{{.Error}}')
  {{end}}
</script>
